/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include "PubSub.h"
#include "client.h"
#include "stringTokenizer.h"

#include <stdio.h>
#include <stdlib.h>
#include <rpc/pmap_clnt.h>
#include <string.h>
#include <thread>
#include <chrono>
#include <memory.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
 
#include <sys/ioctl.h>
#include <netinet/in.h>
#include <net/if.h>
#include <arpa/inet.h>


#include <cstring>
#include <iostream>
#include <fstream>
#include <sstream>

#include <vector>
 
#include <unistd.h>
#include <string.h>

#include <sys/socket.h>
#include <sys/ioctl.h>
#include <netinet/in.h>
#include <net/if.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <mutex>


#ifndef SIG_PF
#define SIG_PF void(*)(int)
#endif

static bool_t *
_join_1 (join_1_argument *argp, struct svc_req *rqstp)
{
	return (join_1_svc(argp->IP, argp->Port, rqstp));
}

static bool_t *
_leave_1 (leave_1_argument *argp, struct svc_req *rqstp)
{
	return (leave_1_svc(argp->IP, argp->Port, rqstp));
}

static bool_t *
_subscribe_1 (subscribe_1_argument *argp, struct svc_req *rqstp)
{
	return (subscribe_1_svc(argp->IP, argp->Port, argp->Article, rqstp));
}

static bool_t *
_unsubscribe_1 (unsubscribe_1_argument *argp, struct svc_req *rqstp)
{
	return (unsubscribe_1_svc(argp->IP, argp->Port, argp->Article, rqstp));
}

static bool_t *
_publish_1 (publish_1_argument *argp, struct svc_req *rqstp)
{
	return (publish_1_svc(argp->Article, argp->IP, argp->Port, rqstp));
}

static bool_t *
_ping_1 (void  *argp, struct svc_req *rqstp)
{
	return (ping_1_svc(rqstp));
}

static void
communicate_prog_1(struct svc_req *rqstp, register SVCXPRT *transp)
{
	union {
		join_1_argument join_1_arg;
		leave_1_argument leave_1_arg;
		subscribe_1_argument subscribe_1_arg;
		unsubscribe_1_argument unsubscribe_1_arg;
		publish_1_argument publish_1_arg;
	} argument;
	char *result;
	xdrproc_t _xdr_argument, _xdr_result;
	char *(*local)(char *, struct svc_req *);

	switch (rqstp->rq_proc) {
	case NULLPROC:
		(void) svc_sendreply (transp, (xdrproc_t) xdr_void, (char *)NULL);
		return;

	case Join:
		_xdr_argument = (xdrproc_t) xdr_join_1_argument;
		_xdr_result = (xdrproc_t) xdr_bool;
		local = (char *(*)(char *, struct svc_req *)) _join_1;
		break;

	case Leave:
		_xdr_argument = (xdrproc_t) xdr_leave_1_argument;
		_xdr_result = (xdrproc_t) xdr_bool;
		local = (char *(*)(char *, struct svc_req *)) _leave_1;
		break;

	case Subscribe:
		_xdr_argument = (xdrproc_t) xdr_subscribe_1_argument;
		_xdr_result = (xdrproc_t) xdr_bool;
		local = (char *(*)(char *, struct svc_req *)) _subscribe_1;
		break;

	case Unsubscribe:
		_xdr_argument = (xdrproc_t) xdr_unsubscribe_1_argument;
		_xdr_result = (xdrproc_t) xdr_bool;
		local = (char *(*)(char *, struct svc_req *)) _unsubscribe_1;
		break;

	case Publish:
		_xdr_argument = (xdrproc_t) xdr_publish_1_argument;
		_xdr_result = (xdrproc_t) xdr_bool;
		local = (char *(*)(char *, struct svc_req *)) _publish_1;
		break;

	case Ping:
		_xdr_argument = (xdrproc_t) xdr_void;
		_xdr_result = (xdrproc_t) xdr_bool;
		local = (char *(*)(char *, struct svc_req *)) _ping_1;
		break;

	default:
		svcerr_noproc (transp);
		return;
	}
	memset ((char *)&argument, 0, sizeof (argument));
	if (!svc_getargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		svcerr_decode (transp);
		return;
	}
	result = (*local)((char *)&argument, rqstp);
	if (result != NULL && !svc_sendreply(transp, (xdrproc_t) _xdr_result, result)) {
		svcerr_systemerr (transp);
	}
	if (!svc_freeargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		fprintf (stderr, "%s", "unable to free arguments");
		exit (1);
	}
	return;
}

// unsigned char * getIP()
// {
// 	unsigned char ip_address[15];
//     int fd;
//     struct ifreq ifr;
     
//     /*AF_INET - to define network interface IPv4*/
//     /*Creating soket for it.*/
//     fd = socket(AF_INET, SOCK_DGRAM, 0);
     
//     /*AF_INET - to define IPv4 Address type.*/
//     ifr.ifr_addr.sa_family = AF_INET;
     
//     /*eth0 - define the ifr_name - port name
//     where network attached.*/
//     memcpy(ifr.ifr_name, "eno1", IFNAMSIZ-1);
     
//     /*Accessing network interface information by
//     passing address using ioctl.*/
//     ioctl(fd, SIOCGIFADDR, &ifr);
//     /*closing fd*/
//     close(fd);
     
//     /*Extract IP Address*/
//     strcpy(ip_address,inet_ntoa(((struct sockaddr_in *)&ifr.ifr_addr)->sin_addr));

// 	return ip_address;
// }
int reg_port=5105;
static const int groupserver_port = 5107;
static const char *register_server_name = "127.0.0.1";

char* getIP()
{
 	static char ip_address[15];
    int fd;
    struct ifreq ifr;
     
    /*AF_INET - to define network interface IPv4*/
    /*Creating soket for it.*/
    fd = socket(AF_INET, SOCK_DGRAM, 0);
     
    /*AF_INET - to define IPv4 Address type.*/
    ifr.ifr_addr.sa_family = AF_INET;
     
    /*eth0 - define the ifr_name - port name
    where network attached.*/
    memcpy(ifr.ifr_name, "eno1", IFNAMSIZ-1);
     
    /*Accessing network interface information by
    passing address using ioctl.*/
    ioctl(fd, SIOCGIFADDR, &ifr);
    /*closing fd*/
    close(fd);
     
    /*Extract IP Address*/
    strcpy(ip_address,inet_ntoa(((struct sockaddr_in *)&ifr.ifr_addr)->sin_addr));

	return ip_address;
}

int Register(){
	int sock;
	struct hostent *reg_server_ht;
	struct sockaddr_in reg_server_addr;
	char message[MAXSTRING];
	if((sock = socket(AF_INET,SOCK_DGRAM,0))<0){
		perror("cannot create socket!\n");
		return 0;
	}
	reg_server_ht = gethostbyname(register_server_name);
	if (!reg_server_ht) {
	fprintf(stderr, "could not obtain address of %s\n", register_server_name);
		return 0;
	}
	bzero(&reg_server_addr, sizeof(reg_server_addr)); 
	reg_server_addr.sin_family = AF_INET;
	srand(time(NULL));
	//reg_port = 7000+rand()%1000;
	reg_server_addr.sin_port = htons(reg_port);
	memcpy((void *)&reg_server_addr.sin_addr, reg_server_ht->h_addr_list[0], reg_server_ht->h_length);
	//connect to server
	if(connect(sock, (struct sockaddr *)&reg_server_addr, sizeof(reg_server_addr)) < 0){ 
			perror("Error : Connect Failed"); 
			return 0; 
	} 
	sprintf(message,"Register;RPC;%s;%d;0;0",getIP(),groupserver_port);
	sendto(sock,message,sizeof(message),0,(struct sockaddr *)&reg_server_addr,sizeof(reg_server_addr));
	// close(sock);
	return 1;
}

void* listen(void* pData){
	
	int listenfd = 0;
	int nState = 0;
	int nReceivedBytes = 0;
	socklen_t nClientAddr = 0;
	char szReceivedData[129];
	struct sockaddr_in serv_addr, client_addr;

	string strCommand;
	string strRPCFormat;
	string strIPAddress;

	// COMMAND_TYPE command_type = UNKNOWN_COMMAND;
	// RPC_FORMAT rpc_format = UNKNOWN_FORMAT;
	int nPort = 0;
	
	//RPC
	uint32_t uiProgram = 0;
	uint32_t uiVersion = 0;

	string strReturn;

	nClientAddr = sizeof(client_addr);
	// socket create
	listenfd = socket(AF_INET, SOCK_DGRAM, 0);

	if(listenfd < 0)
	{
		perror("socket error : ");
        return NULL;
	}

	serv_addr.sin_family = AF_INET;
	serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);
	serv_addr.sin_port = htons(groupserver_port);

	nState = bind(listenfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr));

	if (nState == -1)
	{
		perror("bind error : ");
		return NULL;
	}

	while(1){

		nReceivedBytes = recvfrom(listenfd, szReceivedData, 128, 0, (struct sockaddr *)&client_addr, &nClientAddr);
		cout<<"revceived data: "<<szReceivedData<<endl<<flush;
		if(nReceivedBytes == -1)
		{
			perror("recvFrom failed");
			break;
		}

		szReceivedData[nReceivedBytes] = '\0';
		// cout<<"received data: "<<szReceivedData<<endl<<flush;

		sendto(listenfd, szReceivedData, strlen(szReceivedData),  0, (const struct sockaddr *) &client_addr, nClientAddr); 
	}

}

int
main (int argc, char **argv)
{
	register SVCXPRT *transp;

	pmap_unset (COMMUNICATE_PROG, COMMUNICATE_VERSION);

	transp = svcudp_create(RPC_ANYSOCK);
	if (transp == NULL) {
		fprintf (stderr, "%s", "cannot create udp service.");
		exit(1);
	}
	if (!svc_register(transp, COMMUNICATE_PROG, COMMUNICATE_VERSION, communicate_prog_1, IPPROTO_UDP)) {
		fprintf (stderr, "%s", "unable to register (COMMUNICATE_PROG, COMMUNICATE_VERSION, udp).");
		exit(1);
	}

	transp = svctcp_create(RPC_ANYSOCK, 0, 0);
	if (transp == NULL) {
		fprintf (stderr, "%s", "cannot create tcp service.");
		exit(1);
	}
	if (!svc_register(transp, COMMUNICATE_PROG, COMMUNICATE_VERSION, communicate_prog_1, IPPROTO_TCP)) {
		fprintf (stderr, "%s", "unable to register (COMMUNICATE_PROG, COMMUNICATE_VERSION, tcp).");
		exit(1);
	}

	
	if(!Register()){
		perror("can't register!\n");
	}
	
	pthread_t listenThread;

	pthread_create(&listenThread, NULL, listen, NULL);

	svc_run ();
	fprintf (stderr, "%s", "svc_run returned");
	exit (1);
	/* NOTREACHED */
}
