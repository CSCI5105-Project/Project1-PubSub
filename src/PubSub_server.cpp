/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "PubSub.h"
#include "client.h"
#include <stdio.h>
#include <vector>
#include <arpa/inet.h>
#include <algorithm>

using namespace std;

vector<Client> clients;

vector<Client>::iterator seek_Client(char *IP, int Port){
	int ip;
	inet_pton(AF_INET,IP,&ip);
	auto it = clients.begin();
	for (; it != clients.end(); ++it) {
		if (it->ip == ip && it->port == Port) {
			return it;
		}
	}
	return it;
}

bool_t *
join_1_svc(char *IP, int Port,  struct svc_req *rqstp)
{
	static bool_t  result;

	if(clients.size()>=MAXCLIENT){
		fprintf(stderr,"Cannot add more clients!\n");
		result = 1;
	}
	else if(seek_Client(IP,Port) != clients.end()){
		fprintf(stderr,"Client (%s,%d) has already joined to the server!\n",IP,Port);
		result = 1;
	}
	else{
		Client c(IP,Port);
		clients.push_back(c);
		fprintf(stdout,"Client (%s,%d) Join successfully!!\n",IP,Port);
	}
	
	return &result;
}

bool_t *
leave_1_svc(char *IP, int Port,  struct svc_req *rqstp)
{
	static bool_t  result;
	auto it = seek_Client(IP,Port);
	if(it != clients.end()){
		clients.erase(it);
		printf("Client (%s,%d) leaves group server successfully!!\n",IP,Port);
	}
	else{
		fprintf(stderr,"Cannot find Client (%s,%d)!!\n",IP,Port);
		result = 1;
	}
	return &result;
}

bool_t *
subscribe_1_svc(char *IP, int Port, char *Article,  struct svc_req *rqstp)
{
	static bool_t  result;

	for (auto it = clients.begin(); it != clients.end(); ++it) {
		Client c = *it;

	}

	return &result;
}

bool_t *
unsubscribe_1_svc(char *IP, int Port, char *Article,  struct svc_req *rqstp)
{
	static bool_t  result;

	/*
	 * insert server code here
	 */

	return &result;
}

bool_t *
publish_1_svc(char *Article, char *IP, int Port,  struct svc_req *rqstp)
{
	static bool_t  result;

	/*
	 * insert server code here
	 */

	return &result;
}

bool_t *
ping_1_svc(struct svc_req *rqstp)
{
	static bool_t  result;

	/*
	 * insert server code here
	 */
	fprintf(stdout,"Successful Ping.\n");
	result = 1;
	return &result;
}
