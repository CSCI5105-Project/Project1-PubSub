/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "PubSub.h"
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <cstring>
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <utility>
#include <thread>
#include <chrono>

#include <unistd.h>
#include <string.h>

#include <sys/socket.h>
#include <sys/ioctl.h>
#include <netinet/in.h>
#include <net/if.h>
#include <arpa/inet.h>
#include "stringTokenizer.h"

#include <netdb.h>
    
#include <time.h>

typedef enum {UNKNOWN_FORMAT=0, RPC, RMI} RPC_FORMAT;
typedef enum {UNKNOWN_COMMAND=0, REGISTER, DEREGISTER, GETLIST} COMMAND_TYPE;



using namespace std;
//static const int register_server_port = 5105;
static const char *register_server_name = "127.0.0.1";
struct ClientAddress {
	char ip[15];
	int port;
};

vector<ClientAddress> clients;

vector<string> serverList; 

vector<CLIENT *> rpcClients;

vector<pthread_t> threads;  

void* listen(void* id){
        //int count = 0;
        //while (count<=10){count++;cout<<"1"<<endl;}
    	
	int listenfd = 0;
	int nState = 0;
	int nReceivedBytes = 0;
	socklen_t nClientAddr = 0;
	char szReceivedData[129];
	struct sockaddr_in serv_addr, client_addr;

	string strCommand;
	string strRPCFormat;
	string strIPAddress;

	COMMAND_TYPE command_type = UNKNOWN_COMMAND;
	RPC_FORMAT rpc_format = UNKNOWN_FORMAT;
	int nPort = 0;
	
	//RPC
	uint32_t uiProgram = 0;
	uint32_t uiVersion = 0;

	string strReturn;

	nClientAddr = sizeof(client_addr);
	// socket create
	listenfd = socket(AF_INET, SOCK_DGRAM, 0);

	if(listenfd < 0)
	{
		perror("socket error : ");
        return NULL;
	}

	int PORT = clients[*(int*)id].port;

	serv_addr.sin_family = AF_INET;
	serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);
	serv_addr.sin_port = htons(PORT);

	nState = bind(listenfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr));
	
	if (nState == -1)
	{
		perror("bind error : ");
		return NULL;
	}

	 //Parsing Address port Info
	CStringTokenizer stringTokenizer;

	while(1){
		nReceivedBytes = recvfrom(listenfd, szReceivedData, 128, 0, (struct sockaddr *)&client_addr, &nClientAddr);

		if(nReceivedBytes == -1)
		{
			perror("recvFrom failed");
			break;
		}

		szReceivedData[nReceivedBytes] = '\0';

		//cout << "Received Message : " << szReceivedData << endl;
	
		//Tokenizer
	    stringTokenizer.Split(szReceivedData, ";");

		//Check Command Type;
		strCommand = stringTokenizer.GetNext();
		cout<<"type: "<<strCommand<<endl;
		strCommand = stringTokenizer.GetNext();
                cout<<"originator: "<<strCommand<<endl;
		strCommand = stringTokenizer.GetNext();
                cout<<"org: "<<strCommand<<endl;
		strCommand = stringTokenizer.GetNext();
                cout<<"content: "<<strCommand<<endl;		
	
	}


}


char* getIP()
{
 	static char ip_address[15];
    int fd;
    struct ifreq ifr;
     
    /*AF_INET - to define network interface IPv4*/
    /*Creating soket for it.*/
    fd = socket(AF_INET, SOCK_DGRAM, 0);
     
    /*AF_INET - to define IPv4 Address type.*/
    ifr.ifr_addr.sa_family = AF_INET;
     
    /*eth0 - define the ifr_name - port name
    where network attached.*/
    memcpy(ifr.ifr_name, "eno1", IFNAMSIZ-1);
     
    /*Accessing network interface information by
    passing address using ioctl.*/
    ioctl(fd, SIOCGIFADDR, &ifr);
    /*closing fd*/
    close(fd);
     
    /*Extract IP Address*/
    strcpy(ip_address,inet_ntoa(((struct sockaddr_in *)&ifr.ifr_addr)->sin_addr));

	return ip_address;
}

int GetList(char *ip, int port){
	int sock;
	struct hostent *reg_server_ht;
	struct sockaddr_in reg_server_addr;
	char message[MAXSTRING];
	char tmp_list[1024];
	string groupserver_list;
	//create socket
	if ((sock = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
	perror("cannot create socket");
	return 0;
	}
	//set server's addr and port
	reg_server_ht = gethostbyname(register_server_name);
	if (!reg_server_ht) {
	fprintf(stderr, "could not obtain address of %s\n", register_server_name);
		return 0;
	}
	bzero(&reg_server_addr, sizeof(reg_server_addr)); 
	reg_server_addr.sin_family = AF_INET;
	reg_server_addr.sin_port = htons(port);
	memcpy((void *)&reg_server_addr.sin_addr, reg_server_ht->h_addr_list[0], reg_server_ht->h_length);
	//connect to server
	if(connect(sock, (struct sockaddr *)&reg_server_addr, sizeof(reg_server_addr)) < 0){ 
			perror("Error : Connect Failed"); 
			return 0; 
	} 
	sprintf(message,"GetList;RPC;%s;%d",ip,port);
	sendto(sock,message,sizeof(message),0,(struct sockaddr *)&reg_server_addr,sizeof(reg_server_addr));
	recvfrom(sock,tmp_list,sizeof(groupserver_list),0,NULL,NULL);
	groupserver_list = tmp_list;
	
	CStringTokenizer token;
	token.Split(groupserver_list, ";");
	for (int i = 0; i < token.GetSize(); i+=2){
		string ip = token.GetNext();
		token.GetNext();
		token.GetNext();
		serverList.push_back(ip);
	}

	//printf("%s\n",groupserver_list);
	close(sock);
	return 1;
}

void
communicate_prog_1(char *host)
{
	CLIENT *clnt;
	bool_t* result;
	bool_t  *result_1;
	bool_t  *result_2;
	char *leave_1_IP;
	int leave_1_Port;
	bool_t  *result_3;
	char *subscribe_1_IP;
	int subscribe_1_Port;
	char *subscribe_1_Article;
	bool_t  *result_4;
	char *unsubscribe_1_IP;
	int unsubscribe_1_Port;
	char *unsubscribe_1_Article;
	bool_t  *result_5;
	char *publish_1_Article;
	char *publish_1_IP;
	int publish_1_Port;
	bool_t  *result_6;

#ifndef	DEBUG
	clnt = clnt_create (host, COMMUNICATE_PROG, COMMUNICATE_VERSION, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */

	clients.clear();
	bool flag = true;
	string line;
	ifstream myfile("test.txt");
	if (myfile.is_open())
	{
		while (getline (myfile,line))
		{	
			if (line == "") continue;
			
			stringstream ss(line);
			string cmd;
			ss >> cmd;
			if (cmd[0] == '#') continue;
			
			if (cmd == "create") {
				cout << "create" << endl;
				ClientAddress addr;
				strcpy(addr.ip, getIP());
				addr.port = 6000 + clients.size();
				clients.push_back(addr);
				if(!GetList(addr.ip,addr.port)){
					perror("GetList failed!\n");
				}
				srand(time(NULL));
				int randNum = rand()%serverList.size();
				string ip = serverList[randNum];
				char tmp_str[20];
				strcpy(tmp_str, ip.c_str());

				CLIENT *clnt = clnt_create (tmp_str, COMMUNICATE_PROG, COMMUNICATE_VERSION, "udp");
				if (clnt == NULL) {
					clnt_pcreateerror (host);
					exit (1);
				}
				rpcClients.push_back(clnt);	

				pthread_t listenThread;
				int id = clients.size() -1;
				pthread_create(&listenThread, NULL, listen, (void *)&id);
				//struct ClientAddress *args = (struct ClientAddress *)args;
				threads.push_back(listenThread);
				

					
			} else if (cmd == "join") {
				int id;
				ss >> id;
				cout << "Client " << id << " called join()" << endl;

				result_1 = join_1(clients[id].ip, clients[id].port, rpcClients[id]);
				if (result_1 == (bool_t *) NULL) {
					clnt_perror (clnt, "call join() failed");
				}
			} else if (cmd == "leave") {
				int id;
				ss >> id;
				cout << "Client " << id << " called leave()" << endl;

				result_1 = leave_1(clients[id].ip, clients[id].port, rpcClients[id]);
				if (result_1 == (bool_t *) NULL) {
					clnt_perror (clnt, "call leave() failed");
				}
			} else if (cmd == "subscribe") {
				int id;
				ss >> id;
				cout << "Client " << id << " called subscribe()" << endl;

				string s;
				char article[MAXSTRING];
				ss >> article;
				strcpy(article, s.c_str());

				result_1 = subscribe_1(clients[id].ip, clients[id].port, article, rpcClients[id]);
				if (result_1 == (bool_t *) NULL) {
					clnt_perror (clnt, " call subscribe() failed");
				}
			} else if (cmd == "unsubscribe") {
				int id;
				ss >> id;
				cout << "Client " << id << " called unsubscribe()" << endl;

				string s;
				char article[MAXSTRING];
				ss >> article;
				strcpy(article, s.c_str());

				result_1 = unsubscribe_1(clients[id].ip, clients[id].port, article, rpcClients[id]);
				if (result_1 == (bool_t *) NULL) {
					clnt_perror (clnt, "call unsubscribe() failed");
				}
			} else if (cmd == "publish") {
				int id;
				ss >> id;
				cout << "Client " << id << " called publish()" << endl;

				string s;
				char article[MAXSTRING];
				ss >> article;
				strcpy(article, s.c_str());

				result_1 = publish_1(article, clients[id].ip, clients[id].port, rpcClients[id]);
				if (result_1 == (bool_t *) NULL) {
					clnt_perror (clnt, " call publish() failed");
				}
			} else {
				cout << "Unknown command" << endl;
			}
		}
		myfile.close();
	}

	while (flag){
		sleep(1);
	        result_6 = ping_1(clnt);
        	if (result_6 == (bool_t *) NULL) {
			flag = false;
			printf("I need to join another group.\n");
			// join another group
       		}
	}

#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */
}


int
main (int argc, char *argv[])
{
	char *host;

	if (argc < 2) {
		printf ("usage: %s server_host\n", argv[0]);
		exit (1);
	}
	host = argv[1];
	CLIENT *clnt = clnt_create (host, COMMUNICATE_PROG, COMMUNICATE_VERSION, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
communicate_prog_1 (host);
for (int i=0;i<threads.size();i++){
	int nRes = pthread_join(threads[i], NULL);
}
exit (0);
}